{"description":"<p>Data grouping is the concept of sampling the data values into larger\nblocks in order to ease readability and increase performance of the\nJavaScript charts. Highstock by default applies data grouping when\nthe points become closer than a certain pixel value, determined by\nthe <code>groupPixelWidth</code> option.</p>\n<p>If data grouping is applied, the grouping information of grouped\npoints can be read from the <a href=\"/class-reference/Highcharts.Point#dataGroup\">Point.dataGroup</a>. If point options other than\nthe data itself are set, for example <code>name</code> or <code>color</code> or custom properties,\nthe grouping logic doesn&#39;t know how to group it. In this case the options of\nthe first point instance are copied over to the group point. This can be\naltered through a custom <code>approximation</code> callback function.</p>\n","requires":[],"typeList":{"names":["*"]},"children":[{"name":"approximation","fullname":"series.line.dataGrouping.approximation","isLeaf":true,"typeMap":{"Highcharts.DataGroupingApproximationValue":1,"function":1},"typeList":{"names":["Highcharts.DataGroupingApproximationValue","function"]},"description":"<p>The method of approximation inside a group. When for example 30 days\nare grouped into one month, this determines what value should represent\nthe group. Possible values are &quot;average&quot;, &quot;averages&quot;, &quot;open&quot;, &quot;high&quot;,\n&quot;low&quot;, &quot;close&quot; and &quot;sum&quot;. For OHLC and candlestick series the approximation\nis &quot;ohlc&quot; by default, which finds the open, high, low and close values\nwithin all the grouped data. For ranges, the approximation is &quot;range&quot;,\nwhich finds the low and high values. For multi-dimensional data,\nlike ranges and OHLC, &quot;averages&quot; will compute the average for each\ndimension.</p>\n<p>Custom aggregate methods can be added by assigning a callback function\nas the approximation. This function takes a numeric array as the\nargument and should return a single numeric value or <code>null</code>. Note\nthat the numeric array will never contain null values, only true\nnumbers. Instead, if null values are present in the raw data, the\nnumeric array will have an <code>.hasNulls</code> property set to <code>true</code>. For\nsingle-value data sets the data is available in the first argument\nof the callback function. For OHLC data sets, all the open values\nare in the first argument, all high values in the second etc.</p>\n<p>Since v4.2.7, grouping meta data is available in the approximation\ncallback from <code>this.dataGroupInfo</code>. It can be used to extract information\nfrom the raw data.</p>\n<p>Defaults to <code>average</code> for line-type series, <code>sum</code> for columns, <code>range</code>\nfor range series and <code>ohlc</code> for OHLC and candlestick.</p>\n","samples":[{"name":"Approximation callback with custom data","value":"stock/plotoptions/series-datagrouping-approximation","products":["highstock"]}],"filename":"js/parts/DataGrouping.js","line":716,"lineEnd":749,"version":"5071faa03"},{"name":"dateTimeLabelFormats","fullname":"series.line.dataGrouping.dateTimeLabelFormats","isLeaf":true,"typeMap":{"object":1},"typeList":{"names":["object"]},"description":"<p>Datetime formats for the header of the tooltip in a stock chart.\nThe format can vary within a chart depending on the currently selected\ntime range and the current data grouping.</p>\n<p>The default formats are:</p>\n<pre><code class=\"language-js\">{\n    millisecond: [\n        &#39;%A, %b %e, %H:%M:%S.%L&#39;, &#39;%A, %b %e, %H:%M:%S.%L&#39;, &#39;-%H:%M:%S.%L&#39;\n    ],\n    second: [&#39;%A, %b %e, %H:%M:%S&#39;, &#39;%A, %b %e, %H:%M:%S&#39;, &#39;-%H:%M:%S&#39;],\n    minute: [&#39;%A, %b %e, %H:%M&#39;, &#39;%A, %b %e, %H:%M&#39;, &#39;-%H:%M&#39;],\n    hour: [&#39;%A, %b %e, %H:%M&#39;, &#39;%A, %b %e, %H:%M&#39;, &#39;-%H:%M&#39;],\n    day: [&#39;%A, %b %e, %Y&#39;, &#39;%A, %b %e&#39;, &#39;-%A, %b %e, %Y&#39;],\n    week: [&#39;Week from %A, %b %e, %Y&#39;, &#39;%A, %b %e&#39;, &#39;-%A, %b %e, %Y&#39;],\n    month: [&#39;%B %Y&#39;, &#39;%B&#39;, &#39;-%B %Y&#39;],\n    year: [&#39;%Y&#39;, &#39;%Y&#39;, &#39;-%Y&#39;]\n}</code></pre>\n<p>For each of these array definitions, the first item is the format\nused when the active time span is one unit. For instance, if the\ncurrent data applies to one week, the first item of the week array\nis used. The second and third items are used when the active time\nspan is more than two units. For instance, if the current data applies\nto two weeks, the second and third item of the week array are used,\n and applied to the start and end date of the time span.</p>\n","filename":"js/parts/DataGrouping.js","line":750,"lineEnd":781,"version":"5071faa03"},{"name":"enabled","fullname":"series.line.dataGrouping.enabled","isLeaf":true,"default":"true","typeMap":{"boolean":1},"typeList":{"names":["boolean"]},"description":"<p>Enable or disable data grouping.</p>\n","filename":"js/parts/DataGrouping.js","line":782,"lineEnd":788,"version":"5071faa03"},{"name":"forced","fullname":"series.line.dataGrouping.forced","isLeaf":true,"default":"false","typeMap":{"boolean":1},"typeList":{"names":["boolean"]},"description":"<p>When data grouping is forced, it runs no matter how small the intervals\nare. This can be handy for example when the sum should be calculated\nfor values appearing at random times within each hour.</p>\n","filename":"js/parts/DataGrouping.js","line":789,"lineEnd":797,"version":"5071faa03"},{"name":"groupAll","fullname":"series.line.dataGrouping.groupAll","isLeaf":true,"default":"false","typeMap":{"boolean":1},"typeList":{"names":["boolean"]},"description":"<p>By default only points within the visible range are grouped. Enabling this\noption will force data grouping to calculate all grouped points for a given\ndataset. That option prevents for example a column series from calculating\na grouped point partially. The effect is similar to\n<a href=\"#plotOptions.series.getExtremesFromAll\">Series.getExtremesFromAll</a> but does\nnot affect yAxis extremes.</p>\n","since":"6.1.0","samples":[{"name":"Two series with the same data but different groupAll setting","value":"stock/plotoptions/series-datagrouping-groupall/","products":["highstock"]}],"filename":"js/parts/DataGrouping.js","line":814,"lineEnd":829,"version":"5071faa03"},{"name":"groupPixelWidth","fullname":"series.line.dataGrouping.groupPixelWidth","isLeaf":true,"default":"2","typeMap":{"number":1},"typeList":{"names":["number"]},"description":"<p>The approximate pixel width of each group. If for example a series\nwith 30 points is displayed over a 600 pixel wide plot area, no grouping\nis performed. If however the series contains so many points that\nthe spacing is less than the groupPixelWidth, Highcharts will try\nto group it into appropriate groups so that each is more or less\ntwo pixels wide. If multiple series with different group pixel widths\nare drawn on the same x axis, all series will take the greatest width.\nFor example, line series have 2px default group width, while column\nseries have 10px. If combined, both the line and the column will\nhave 10px by default.</p>\n","filename":"js/parts/DataGrouping.js","line":798,"lineEnd":813,"version":"5071faa03"},{"name":"smoothed","fullname":"series.line.dataGrouping.smoothed","isLeaf":true,"default":"false","typeMap":{"boolean":1},"typeList":{"names":["boolean"]},"description":"<p>Normally, a group is indexed by the start of that group, so for example\nwhen 30 daily values are grouped into one month, that month&#39;s x value\nwill be the 1st of the month. This apparently shifts the data to\nthe left. When the smoothed option is true, this is compensated for.\nThe data is shifted to the middle of the group, and min and max\nvalues are preserved. Internally, this is used in the Navigator series.</p>\n","filename":"js/parts/DataGrouping.js","line":830,"lineEnd":841,"version":"5071faa03"},{"name":"units","fullname":"series.line.dataGrouping.units","isLeaf":true,"typeMap":{"array":"array.<string, (array.<number"},"typeList":{"names":["Array.<Array.<string, (Array.<number>|null)>>"]},"description":"<p>An array determining what time intervals the data is allowed to be\ngrouped to. Each array item is an array where the first value is\nthe time unit and the second value another array of allowed multiples.</p>\n<p>Defaults to:</p>\n<pre><code class=\"language-js\">units: [[\n    &#39;millisecond&#39;, // unit name\n    [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples\n], [\n    &#39;second&#39;,\n    [1, 2, 5, 10, 15, 30]\n], [\n    &#39;minute&#39;,\n    [1, 2, 5, 10, 15, 30]\n], [\n    &#39;hour&#39;,\n    [1, 2, 3, 4, 6, 8, 12]\n], [\n    &#39;day&#39;,\n    [1]\n], [\n    &#39;week&#39;,\n    [1]\n], [\n    &#39;month&#39;,\n    [1, 3, 6]\n], [\n    &#39;year&#39;,\n    null\n]]</code></pre>\n","filename":"js/parts/DataGrouping.js","line":842,"lineEnd":878,"version":"5071faa03"}]}